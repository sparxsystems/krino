//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Ondrej\Source\Repos\KrinoApp\src\Krino\Krino.EnglishGrammar\English.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EnglishLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOUN=1, VERB=2, ADJECTIVE=3, ADVERB=4, NUMERAL=5, PRONOUN=6, DETETMINER=7, 
		PREPOSITION=8, POSTPOSITION=9, CONJUNCTION=10, CONJUNCTION_COORDINATING=11, 
		INTERJECTION=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NOUN", "VERB", "ADJECTIVE", "ADVERB", "NUMERAL", "PRONOUN", "DETETMINER", 
		"PREPOSITION", "POSTPOSITION", "CONJUNCTION", "CONJUNCTION_COORDINATING", 
		"INTERJECTION", "WS"
	};


	public EnglishLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EnglishLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'noun'", "'verb'", "'adjective'", "'adverb'", "'numeral'", "'pronoun'", 
		"'determiner'", "'preposition'", "'postposition'", "'conjunction'", "'conjunction.coordinating'", 
		"'interjection'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOUN", "VERB", "ADJECTIVE", "ADVERB", "NUMERAL", "PRONOUN", "DETETMINER", 
		"PREPOSITION", "POSTPOSITION", "CONJUNCTION", "CONJUNCTION_COORDINATING", 
		"INTERJECTION", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "English.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EnglishLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', '\xA5', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x6', '\xE', '\xA0', '\n', '\xE', '\r', '\xE', 
		'\xE', '\xE', '\xA1', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x3', '\x2', '\x3', '\x4', '\x2', '\v', 
		'\v', '\"', '\"', '\x2', '\xA5', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x5', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\'', '\x3', '\x2', '\x2', '\x2', '\t', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x38', '\x3', '\x2', '\x2', '\x2', '\r', '@', '\x3', 
		'\x2', '\x2', '\x2', '\xF', 'H', '\x3', '\x2', '\x2', '\x2', '\x11', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '_', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x17', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x91', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\a', 'p', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', 'q', '\x2', '\x2', '\x1F', ' ', '\a', 'w', '\x2', '\x2', ' ', '!', 
		'\a', 'p', '\x2', '\x2', '!', '\x4', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\a', 'x', '\x2', '\x2', '#', '$', '\a', 'g', '\x2', '\x2', '$', 
		'%', '\a', 't', '\x2', '\x2', '%', '&', '\a', '\x64', '\x2', '\x2', '&', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x63', '\x2', '\x2', 
		'(', ')', '\a', '\x66', '\x2', '\x2', ')', '*', '\a', 'l', '\x2', '\x2', 
		'*', '+', '\a', 'g', '\x2', '\x2', '+', ',', '\a', '\x65', '\x2', '\x2', 
		',', '-', '\a', 'v', '\x2', '\x2', '-', '.', '\a', 'k', '\x2', '\x2', 
		'.', '/', '\a', 'x', '\x2', '\x2', '/', '\x30', '\a', 'g', '\x2', '\x2', 
		'\x30', '\b', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x63', 
		'\x2', '\x2', '\x32', '\x33', '\a', '\x66', '\x2', '\x2', '\x33', '\x34', 
		'\a', 'x', '\x2', '\x2', '\x34', '\x35', '\a', 'g', '\x2', '\x2', '\x35', 
		'\x36', '\a', 't', '\x2', '\x2', '\x36', '\x37', '\a', '\x64', '\x2', 
		'\x2', '\x37', '\n', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'p', '\x2', '\x2', '\x39', ':', '\a', 'w', '\x2', '\x2', ':', ';', '\a', 
		'o', '\x2', '\x2', ';', '<', '\a', 'g', '\x2', '\x2', '<', '=', '\a', 
		't', '\x2', '\x2', '=', '>', '\a', '\x63', '\x2', '\x2', '>', '?', '\a', 
		'n', '\x2', '\x2', '?', '\f', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\a', 'r', '\x2', '\x2', '\x41', '\x42', '\a', 't', '\x2', '\x2', '\x42', 
		'\x43', '\a', 'q', '\x2', '\x2', '\x43', '\x44', '\a', 'p', '\x2', '\x2', 
		'\x44', '\x45', '\a', 'q', '\x2', '\x2', '\x45', '\x46', '\a', 'w', '\x2', 
		'\x2', '\x46', 'G', '\a', 'p', '\x2', '\x2', 'G', '\xE', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\a', '\x66', '\x2', '\x2', 'I', 'J', '\a', 'g', 
		'\x2', '\x2', 'J', 'K', '\a', 'v', '\x2', '\x2', 'K', 'L', '\a', 'g', 
		'\x2', '\x2', 'L', 'M', '\a', 't', '\x2', '\x2', 'M', 'N', '\a', 'o', 
		'\x2', '\x2', 'N', 'O', '\a', 'k', '\x2', '\x2', 'O', 'P', '\a', 'p', 
		'\x2', '\x2', 'P', 'Q', '\a', 'g', '\x2', '\x2', 'Q', 'R', '\a', 't', 
		'\x2', '\x2', 'R', '\x10', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', 
		'r', '\x2', '\x2', 'T', 'U', '\a', 't', '\x2', '\x2', 'U', 'V', '\a', 
		'g', '\x2', '\x2', 'V', 'W', '\a', 'r', '\x2', '\x2', 'W', 'X', '\a', 
		'q', '\x2', '\x2', 'X', 'Y', '\a', 'u', '\x2', '\x2', 'Y', 'Z', '\a', 
		'k', '\x2', '\x2', 'Z', '[', '\a', 'v', '\x2', '\x2', '[', '\\', '\a', 
		'k', '\x2', '\x2', '\\', ']', '\a', 'q', '\x2', '\x2', ']', '^', '\a', 
		'p', '\x2', '\x2', '^', '\x12', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', 'r', '\x2', '\x2', '`', '\x61', '\a', 'q', '\x2', '\x2', '\x61', 
		'\x62', '\a', 'u', '\x2', '\x2', '\x62', '\x63', '\a', 'v', '\x2', '\x2', 
		'\x63', '\x64', '\a', 'r', '\x2', '\x2', '\x64', '\x65', '\a', 'q', '\x2', 
		'\x2', '\x65', '\x66', '\a', 'u', '\x2', '\x2', '\x66', 'g', '\a', 'k', 
		'\x2', '\x2', 'g', 'h', '\a', 'v', '\x2', '\x2', 'h', 'i', '\a', 'k', 
		'\x2', '\x2', 'i', 'j', '\a', 'q', '\x2', '\x2', 'j', 'k', '\a', 'p', 
		'\x2', '\x2', 'k', '\x14', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', 
		'\x65', '\x2', '\x2', 'm', 'n', '\a', 'q', '\x2', '\x2', 'n', 'o', '\a', 
		'p', '\x2', '\x2', 'o', 'p', '\a', 'l', '\x2', '\x2', 'p', 'q', '\a', 
		'w', '\x2', '\x2', 'q', 'r', '\a', 'p', '\x2', '\x2', 'r', 's', '\a', 
		'\x65', '\x2', '\x2', 's', 't', '\a', 'v', '\x2', '\x2', 't', 'u', '\a', 
		'k', '\x2', '\x2', 'u', 'v', '\a', 'q', '\x2', '\x2', 'v', 'w', '\a', 
		'p', '\x2', '\x2', 'w', '\x16', '\x3', '\x2', '\x2', '\x2', 'x', 'y', 
		'\a', '\x65', '\x2', '\x2', 'y', 'z', '\a', 'q', '\x2', '\x2', 'z', '{', 
		'\a', 'p', '\x2', '\x2', '{', '|', '\a', 'l', '\x2', '\x2', '|', '}', 
		'\a', 'w', '\x2', '\x2', '}', '~', '\a', 'p', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x65', '\x2', '\x2', '\x7F', '\x80', '\a', 'v', '\x2', '\x2', '\x80', 
		'\x81', '\a', 'k', '\x2', '\x2', '\x81', '\x82', '\a', 'q', '\x2', '\x2', 
		'\x82', '\x83', '\a', 'p', '\x2', '\x2', '\x83', '\x84', '\a', '\x30', 
		'\x2', '\x2', '\x84', '\x85', '\a', '\x65', '\x2', '\x2', '\x85', '\x86', 
		'\a', 'q', '\x2', '\x2', '\x86', '\x87', '\a', 'q', '\x2', '\x2', '\x87', 
		'\x88', '\a', 't', '\x2', '\x2', '\x88', '\x89', '\a', '\x66', '\x2', 
		'\x2', '\x89', '\x8A', '\a', 'k', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'p', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x63', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', 'v', '\x2', '\x2', '\x8D', '\x8E', '\a', 'k', '\x2', '\x2', 
		'\x8E', '\x8F', '\a', 'p', '\x2', '\x2', '\x8F', '\x90', '\a', 'i', '\x2', 
		'\x2', '\x90', '\x18', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', 
		'k', '\x2', '\x2', '\x92', '\x93', '\a', 'p', '\x2', '\x2', '\x93', '\x94', 
		'\a', 'v', '\x2', '\x2', '\x94', '\x95', '\a', 'g', '\x2', '\x2', '\x95', 
		'\x96', '\a', 't', '\x2', '\x2', '\x96', '\x97', '\a', 'l', '\x2', '\x2', 
		'\x97', '\x98', '\a', 'g', '\x2', '\x2', '\x98', '\x99', '\a', '\x65', 
		'\x2', '\x2', '\x99', '\x9A', '\a', 'v', '\x2', '\x2', '\x9A', '\x9B', 
		'\a', 'k', '\x2', '\x2', '\x9B', '\x9C', '\a', 'q', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', 'p', '\x2', '\x2', '\x9D', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA0', '\t', '\x2', '\x2', '\x2', '\x9F', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\b', 
		'\xE', '\x2', '\x2', '\xA4', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x2', '\xA1', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
