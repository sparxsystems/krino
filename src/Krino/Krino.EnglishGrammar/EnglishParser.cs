//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Ondrej\Source\Repos\KrinoApp\src\Krino\Krino.EnglishGrammar\English.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class EnglishParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOUN=1, VERB=2, ADJECTIVE=3, ADVERB=4, NUMERAL=5, PRONOUN=6, DETETMINER=7, 
		PREPOSITION=8, POSTPOSITION=9, CONJUNCTION=10, CONJUNCTION_COORDINATING=11, 
		INTERJECTION=12, WS=13;
	public const int
		RULE_adjectivePhrase = 0, RULE_adverbPhrase = 1;
	public static readonly string[] ruleNames = {
		"adjectivePhrase", "adverbPhrase"
	};

	private static readonly string[] _LiteralNames = {
		null, "'noun'", "'verb'", "'adjective'", "'adverb'", "'numeral'", "'pronoun'", 
		"'determiner'", "'preposition'", "'postposition'", "'conjunction'", "'conjunction.coordinating'", 
		"'interjection'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOUN", "VERB", "ADJECTIVE", "ADVERB", "NUMERAL", "PRONOUN", "DETETMINER", 
		"PREPOSITION", "POSTPOSITION", "CONJUNCTION", "CONJUNCTION_COORDINATING", 
		"INTERJECTION", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "English.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EnglishParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnglishParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnglishParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AdjectivePhraseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADJECTIVE() { return GetTokens(EnglishParser.ADJECTIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE(int i) {
			return GetToken(EnglishParser.ADJECTIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONJUNCTION_COORDINATING() { return GetTokens(EnglishParser.CONJUNCTION_COORDINATING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONJUNCTION_COORDINATING(int i) {
			return GetToken(EnglishParser.CONJUNCTION_COORDINATING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdverbPhraseContext[] adverbPhrase() {
			return GetRuleContexts<AdverbPhraseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdverbPhraseContext adverbPhrase(int i) {
			return GetRuleContext<AdverbPhraseContext>(i);
		}
		public AdjectivePhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adjectivePhrase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnglishVisitor<TResult> typedVisitor = visitor as IEnglishVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdjectivePhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdjectivePhraseContext adjectivePhrase() {
		AdjectivePhraseContext _localctx = new AdjectivePhraseContext(Context, State);
		EnterRule(_localctx, 0, RULE_adjectivePhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADVERB) {
					{
					State = 4;
					adverbPhrase();
					}
				}

				State = 7;
				Match(ADJECTIVE);
				}
				}
				State = 10;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADJECTIVE || _la==ADVERB );
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONJUNCTION_COORDINATING) {
				{
				{
				State = 12;
				Match(CONJUNCTION_COORDINATING);
				State = 13;
				Match(ADJECTIVE);
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdverbPhraseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADVERB() { return GetTokens(EnglishParser.ADVERB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVERB(int i) {
			return GetToken(EnglishParser.ADVERB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONJUNCTION_COORDINATING() { return GetTokens(EnglishParser.CONJUNCTION_COORDINATING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONJUNCTION_COORDINATING(int i) {
			return GetToken(EnglishParser.CONJUNCTION_COORDINATING, i);
		}
		public AdverbPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adverbPhrase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEnglishVisitor<TResult> typedVisitor = visitor as IEnglishVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdverbPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdverbPhraseContext adverbPhrase() {
		AdverbPhraseContext _localctx = new AdverbPhraseContext(Context, State);
		EnterRule(_localctx, 2, RULE_adverbPhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 19;
				Match(ADVERB);
				}
				}
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ADVERB );
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONJUNCTION_COORDINATING) {
				{
				{
				State = 24;
				Match(CONJUNCTION_COORDINATING);
				State = 25;
				Match(ADVERB);
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x5', '\x2', '\b', '\n', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '\v', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\f', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x11', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x14', '\v', '\x2', '\x3', '\x3', '\x6', '\x3', '\x17', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\x18', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x1D', '\n', '\x3', '\f', '\x3', '\xE', '\x3', ' ', '\v', 
		'\x3', '\x3', '\x3', '\x2', '\x2', '\x4', '\x2', '\x4', '\x2', '\x2', 
		'\x2', '$', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\b', '\x5', '\x4', '\x3', '\x2', '\a', '\x6', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\b', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\t', '\v', '\a', '\x5', '\x2', '\x2', 
		'\n', '\a', '\x3', '\x2', '\x2', '\x2', '\v', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x12', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', 
		'\a', '\r', '\x2', '\x2', '\xF', '\x11', '\a', '\x5', '\x2', '\x2', '\x10', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x11', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x15', '\x17', '\a', '\x6', '\x2', 
		'\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\a', '\r', '\x2', '\x2', '\x1B', '\x1D', '\a', 
		'\x6', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '\a', '\a', 
		'\f', '\x12', '\x18', '\x1E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
