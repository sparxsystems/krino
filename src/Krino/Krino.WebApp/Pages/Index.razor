@page "/"

@using System.Linq
@using Krino.Vertical.Utils.Enums

@inject Krino.ViewModel.IConstructiveDictionaryViewModel myConstructiveDictionary


<div class="row">
    <div class="col-md">
        <h3>Krino</h3>
    </div>
</div>
<div class="row">
    <div class="col-md">
        <h4 class="text-center">Constructive Dictionary</h4>
    </div>
</div>
<div class="row border-bottom">
    <div class="col-md-4">
        <h5 class="text-center">Lexemes</h5>
        <div class="row">
            <div class="col-md">
                @*<RadzenGrid Data="@Lexemes" AllowFiltering="true" AllowSorting="true"  Style=@($"height:{@TableHeight};")>
                    <Columns>
                    </Columns>
                </RadzenGrid>*@
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <h5 class="text-center">Non-Lexemes</h5>
        <div class="row">
            <div class="col-md">
                @*<RadzenGrid Data="@NonLexemes"  Style=@($"height:{@TableHeight};")>
                    <Columns>
                    </Columns>
                </RadzenGrid>*@
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <h5 class="text-center">Patterns</h5>
        <div class="row">
            <div class="col-md">
                @*<RadzenGrid Data="@Patterns" Style=@($"height:{@TableHeight};")>
                    <Columns>
                    </Columns>
                </RadzenGrid>*@
            </div>
        </div>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-9">
        <RadzenTextBox @bind-Value="Statement" Style="width:100%;" />
    </div>
    <div class="col-md">
        <RadzenButton Text="Go" Click="@OnGo"/>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-12">
        @foreach (var result in myAdTreeResults)
        {
            <RadzenTextArea Value="@result" Style="font-family: Courier New, Courier, monospace; width:100%; height:10em;" />
        }
    </div>
</div>


@code {
    private List<string> myAdTreeResults = new List<string>();

    private string Statement { get; set; } = "I have some good news and some bad news";

    private string GetAttributeName(EnumBase enumValue) => enumValue.GetFullName()?.Replace("EnglishAttributes.", "");


    private void OnGo()
    {
        myAdTreeResults.Clear();

        //var adTrees = myConstructiveDictionary.GetAdTree(Statement);
        //if (adTrees != null)
        //{
        //    foreach (var adTree in adTrees)
        //    {
        //        var visualization = myConstructiveDictionary.GetAdTreeVisualization(adTree);
        //        if (!string.IsNullOrEmpty(visualization))
        //        {
        //            myAdTreeResults.Add(visualization);
        //        }
        //    }
        //}
    }
}